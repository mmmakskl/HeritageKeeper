// js/items.js
import * as api from './api.js';
import { showLoader, showError, showSuccess, formatDate, navigateTo } from './utils.js';

let currentCollectionId = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
 * API GET /api/keeper/collection/{id}/items –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ Item:
 * [{ "collection_id": ..., "title": "...", "description": "...", "category_id": ...,
 * "item_images_url": ["..."], "is_public": ..., "country": "...", "year": "...", "id": ... }]
 */
export async function initCollectionItemsPage() {
    const inCollectionSection = document.querySelector('body.in-collection');
    if (!inCollectionSection) return;

    const urlParams = new URLSearchParams(window.location.search);
    const collectionIdParam = urlParams.get('collection_id');

    if (!collectionIdParam || isNaN(parseInt(collectionIdParam))) {
        showError(document.body, 'ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –≤ URL.');
        navigateTo('my_collections_index.html');
        return;
    }
    currentCollectionId = parseInt(collectionIdParam);

    await loadCollectionDetails(currentCollectionId);
    setupAddItemButton(currentCollectionId);
    setupItemEventListeners(inCollectionSection.querySelector('.items'));
}

async function loadCollectionDetails(collectionId) {
    const itemsContainer = document.querySelector('.in-collection .items');
    if (!itemsContainer) return;

    try {
        showLoader(true);
        const [collectionInfo, items] = await Promise.all([
            api.getCollectionById(collectionId), // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ –æ —Å–∞–º–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            api.getCollectionItems(collectionId)  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–π—Ç–µ–º—ã
        ]);

        const collectionNameEl = document.querySelector('.text-wrapper-14'); // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ —à–∞–ø–∫–µ
        const itemCountEl = document.querySelector('.text-wrapper-12');     // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

        if (collectionNameEl) collectionNameEl.textContent = collectionInfo.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏';
        if (itemCountEl) itemCountEl.textContent = items.length.toString() || '0';

        itemsContainer.innerHTML = '';
        if (items.length === 0) {
            itemsContainer.innerHTML = '<p style="padding:20px; text-align:center;">–í —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!</p>';
            return;
        }

        items.forEach(item => {
            const itemElement = document.createElement('div');
            itemElement.className = 'item';

            const imageUrl = (Array.isArray(item.item_images_url) && item.item_images_url.length > 0 && item.item_images_url[0] !== "not found")
                             ? item.item_images_url[0]
                             : 'img/default-item.png';
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å category_name –∏–ª–∏ –æ–±—ä–µ–∫—Ç category —Å –ø–æ–ª–µ–º name
            const categoryDisplay = item.category_name || item.category?.name || item.category_id || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';

            itemElement.innerHTML = `
                <img class="mask-group" src="${imageUrl}" alt="${item.title}" onerror="this.onerror=null;this.src='img/default-item.png';" />
                <div class="text-wrapper-6">${item.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>
                <div class="year">
                    <div class="text-wrapper-7">–ì–æ–¥:</div>
                    <div class="text-wrapper-8">${item.year || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                </div>
                <div class="country">
                    <div class="text-wrapper-7">–°—Ç—Ä–∞–Ω–∞:</div>
                    <div class="text-wrapper-8">${item.country || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
                </div>
                <div class="category">
                    <div class="text-wrapper-7">–ö–∞—Ç–µ–≥–æ—Ä–∏—è ID:</div>
                    <div class="text-wrapper-8">${categoryDisplay}</div>
                </div>
                 <div class="item-actions">
                    <button class="edit-item" data-item-id="${item.id}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="delete-item" data-item-id="${item.id}" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </div>
            `;
            itemsContainer.appendChild(itemElement);
        });

    } catch (error) {
        showError(itemsContainer, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ' + error.message);
    } finally {
        showLoader(false);
    }
}

function setupAddItemButton(collectionId) {
    const addElementBtn = document.querySelector('.add-element');
    if (addElementBtn) {
        addElementBtn.addEventListener('click', (e) => {
            e.preventDefault();
            handleAddNewItem(collectionId);
        });
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é.
 * API POST /api/keeper/item –æ–∂–∏–¥–∞–µ—Ç Item:
 * { "collection_id": ..., "title": "...", "description": "...", "category_id": ...,
 * "item_images_url": ["..."], "is_public": ..., "country": "...", "year": "..." }
 */
async function handleAddNewItem(collectionId) {
    const title = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:');
    if (!title || title.trim() === '') {
         showError(document.body, '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
         return;
    }

    const description = prompt('–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', '');

    const categoryIdInput = prompt('ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1):', '1');
    const categoryId = parseInt(categoryIdInput);
    if (isNaN(categoryId) || categoryId <= 0) {
        showError(document.body, 'ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.');
        return;
    }

    const country = prompt('–°—Ç—Ä–∞–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', '');
    const year = prompt('–ì–æ–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –ì–ì–ì–ì):', '');
    if (year && !/^\d{4}$/.test(year) && year.trim() !== '') {
        showError(document.body, '–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì.');
        return;
    }

    const isPublic = confirm('–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–º?');

    // item_images_url: ["not found"] - –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    const itemImages = ["not found"];

    const itemData = {
        collection_id: collectionId,
        title: title.trim(),
        description: description ? description.trim() : "",
        category_id: categoryId,
        item_images_url: itemImages,
        is_public: isPublic,
        country: country ? country.trim() : "",
        year: year ? year.trim() : ""
    };

    try {
        showLoader(true);
        await api.createCollectionItem(itemData);
        showSuccess('–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
        await loadCollectionDetails(collectionId); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    } catch (error) {
        showError(document.body, '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç: ' + error.message);
    } finally {
        showLoader(false);
    }
}

function setupItemEventListeners(itemsContainer) {
    if (!itemsContainer) return;

    itemsContainer.addEventListener('click', async (e) => {
        const button = e.target.closest('button');
        if (!button) return;

        const itemId = button.dataset.itemId;
        if (!itemId) return;

        if (button.classList.contains('delete-item')) {
            e.preventDefault();
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç?')) {
                try {
                    showLoader(true);
                    await api.deleteCollectionItemApi(itemId);
                    showSuccess('–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
                    await loadCollectionDetails(currentCollectionId);
                } catch (error) {
                    showError(document.body, '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: ' + error.message);
                } finally {
                    showLoader(false);
                }
            }
        } else if (button.classList.contains('edit-item')) {
            e.preventDefault();
            await handleEditItem(itemId);
        }
    });
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
 * API PUT /api/keeper/item/{id} –æ–∂–∏–¥–∞–µ—Ç Item (–ø–æ–ª—è –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏).
 */
async function handleEditItem(itemId) {
    try {
        showLoader(true);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–π—Ç–µ–º–∞ –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è prompt
        const item = await api.getCollectionItem(itemId); // getCollectionItem –∏–∑ api.js
        showLoader(false);

        const title = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', item.title || '');
        if (title === null) return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ—Ç–º–µ–Ω–∞
        if (title.trim() === '') {
            showError(document.body, '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
            return;
        }

        const description = prompt('–û–ø–∏—Å–∞–Ω–∏–µ:', item.description || '');
        const categoryIdInput = prompt(`ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–µ–∫.: ${item.category_id}):`, item.category_id || '1');
        const categoryId = parseInt(categoryIdInput);
        if (isNaN(categoryId) || categoryId <= 0) {
            showError(document.body, 'ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.');
            return;
        }

        const country = prompt('–°—Ç—Ä–∞–Ω–∞:', item.country || '');
        const year = prompt('–ì–æ–¥ (–ì–ì–ì–ì):', item.year || '');
         if (year && !/^\d{4}$/.test(year) && year.trim() !== '') {
            showError(document.body, '–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì.');
            return;
        }
        const isPublic = confirm(`–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–º? (—Ç–µ–∫.: ${item.is_public ? '–î–∞' : '–ù–µ—Ç'})`);

        // item_images_url –ø–æ–∫–∞ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ prompt, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ ["not found"]
        const itemImages = item.item_images_url || ["not found"];

        const itemData = {
            collection_id: item.collection_id, // –û—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ
            title: title.trim(),
            description: description ? description.trim() : "",
            category_id: categoryId,
            item_images_url: itemImages,
            is_public: isPublic,
            country: country ? country.trim() : "",
            year: year ? year.trim() : ""
        };

        showLoader(true);
        await api.updateCollectionItem(itemId, itemData);
        showSuccess('–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.');
        await loadCollectionDetails(currentCollectionId);
    } catch (error) {
        showError(document.body, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç: ' + error.message);
    } finally {
        showLoader(false);
    }
}
